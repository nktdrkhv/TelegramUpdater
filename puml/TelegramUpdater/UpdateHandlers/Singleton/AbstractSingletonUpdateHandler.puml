@startuml
abstract class "AbstractSingletonUpdateHandler`1"<T> {
    <<internal>> AbstractSingletonUpdateHandler(updateType:UpdateType, getT:Func<Update, T?>, filter:IFilter<T>?, group:int)
    <<internal>> ExtraData : IReadOnlyDictionary<string, object>? <<get>>
    + Group : int <<get>>
    + Filter : IFilter<T>? <<get>>
    # {abstract} HandleAsync(cntr:IContainer<T>) : Task
    # <<virtual>> ShouldHandle(updater:IUpdater, input:T) : bool
    <<async>> - HandleAsync(updater:IUpdater, shiningInfo:ShiningInfo<long, Update>) : Task
    + ShouldHandle(updater:IUpdater, update:Update) : bool
    <<internal>> # GetT(update:Update) : T?
    <<internal>> {abstract} ContainerBuilder(updater:IUpdater, shiningInfo:ShiningInfo<long, Update>) : IContainer<T>
}
class "IGenericSingletonUpdateHandler`1"<T> {
}
class "Func`2"<T1,T2> {
}
"IGenericSingletonUpdateHandler`1" "<T>" <|-- "AbstractSingletonUpdateHandler`1"
"AbstractSingletonUpdateHandler`1" --> "UpdateType" UpdateType
"AbstractSingletonUpdateHandler`1" --> "GetActualUpdate<Update,T?>" "Func`2"
@enduml
