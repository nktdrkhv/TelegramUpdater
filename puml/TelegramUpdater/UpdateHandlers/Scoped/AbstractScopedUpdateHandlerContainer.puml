@startuml
abstract class "AbstractScopedUpdateHandlerContainer`2"<THandler,TUpdate> {
    <<internal>> AbstractScopedUpdateHandlerContainer(updateType:UpdateType, filter:IFilter<TUpdate>?)
    - ExtraData : IReadOnlyDictionary<string, object>? <<get>>
    + Filter : IFilter<TUpdate>? <<get>>
    - ShouldHandle(updater:IUpdater, t:TUpdate) : bool
    <<internal>> # {abstract} GetT(update:Update) : TUpdate?
    + ShouldHandle(updater:IUpdater, update:Update) : bool
}
class "IGenericScopedUpdateHandlerContainer`1"<T> {
}
"IGenericScopedUpdateHandlerContainer`1" "<TUpdate>" <|-- "AbstractScopedUpdateHandlerContainer`2"
"AbstractScopedUpdateHandlerContainer`2" --> "ScopedHandlerType" Type
"AbstractScopedUpdateHandlerContainer`2" --> "UpdateType" UpdateType
@enduml
