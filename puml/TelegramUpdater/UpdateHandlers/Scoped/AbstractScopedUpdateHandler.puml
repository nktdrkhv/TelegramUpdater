@startuml
abstract class "AbstractScopedUpdateHandler`1"<T> {
    - _extraData : IReadOnlyDictionary<string, object>?
    <<internal>> AbstractScopedUpdateHandler(getT:Func<Update, T?>, group:int)
    + Group : int <<get>>
    + ActualUpdate : T <<get>>
    - ExtraData : IReadOnlyDictionary<string, object>? <<get>>
    <<internal>> ExtraData : IReadOnlyDictionary<string, object>? <<get>>
    # {abstract} HandleAsync(cntr:IContainer<T>) : Task
    <<async>> - HandleAsync(updater:IUpdater, shiningInfo:ShiningInfo<long, Update>) : Task
    - SetExtraData(extraData:IReadOnlyDictionary<string, object>?) : void
    <<internal>> # GetT(update:Update) : T?
    <<internal>> # {abstract} ContainerBuilder(updater:IUpdater, shiningInfo:ShiningInfo<long, Update>) : IContainer<T>
    - ContainerBuilderWrapper(updater:IUpdater, shiningInfo:ShiningInfo<long, Update>) : IContainer<T>
}
class "Func`2"<T1,T2> {
}
class "IContainer`1"<T> {
}
IScopedUpdateHandler <|-- "AbstractScopedUpdateHandler`1"
"AbstractScopedUpdateHandler`1" --> "_getT<Update,T?>" "Func`2"
"AbstractScopedUpdateHandler`1" o-> "_container<T>" "IContainer`1"
"AbstractScopedUpdateHandler`1" --> "BotClient" ITelegramBotClient
"AbstractScopedUpdateHandler`1" --> "Updater" IUpdater
"AbstractScopedUpdateHandler`1" --> "Container<T>" "IContainer`1"
@enduml
