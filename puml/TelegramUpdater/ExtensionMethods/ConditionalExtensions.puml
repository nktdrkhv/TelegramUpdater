@startuml
class ConditionalExtensions <<static>> {
    + {static} If(simpleContext:IContainer<T>, getText:Func<T, string?>, pattern:string, func:Action<IContainer<T>>, regexOptions:RegexOptions?) : MatchContext<T>
    + {static} If(simpleContext:IContainer<T>, predict:Func<IContainer<T>, bool>, func:Action<IContainer<T>>) : MatchContext<T>
    + {static} Else(matchContext:MatchContext<T>, func:Action<IContainer<T>>) : void
    + {static} ElseIf(matchContext:MatchContext<T>, getText:Func<T, string?>, pattern:string, func:Action<IContainer<T>>, regexOptions:RegexOptions?) : MatchContext<T>
    + {static} ElseIf(matchContext:MatchContext<T>, predict:Func<IContainer<T>, bool>, func:Action<IContainer<T>>) : MatchContext<T>
    + {static} IfNotNull(simpleContext:IContainer<T>?, func:Action<IContainer<T>>) : MatchContext<T>
    + {static} IfNotNull(anything:T, action:Action<T>) : void
    + {static} <<async>> If(simpleContext:IContainer<T>, getText:Func<T, string?>, pattern:string, func:Func<IContainer<T>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<T>>
    + {static} <<async>> If(simpleContext:Task<IContainer<T>>, getText:Func<T, string?>, pattern:string, func:Func<IContainer<T>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<T>>
    + {static} <<async>> If(simpleContext:IContainer<T>, predict:Func<IContainer<T>, bool>, func:Func<IContainer<T>, Task>) : Task<MatchContext<T>>
    + {static} <<async>> If(simpleContext:Task<IContainer<T>>, predict:Func<IContainer<T>, bool>, func:Func<IContainer<T>, Task>) : Task<MatchContext<T>>
    + {static} <<async>> IfNotNull(simpleContext:IContainer<T>?, func:Func<IContainer<T>, Task>) : Task<MatchContext<T>>
    + {static} <<async>> IfNotNull(simpleContext:Task<IContainer<T>?>, func:Func<IContainer<T>, Task>) : Task<MatchContext<T>>
    + {static} <<async>> Else(matchContext:Task<MatchContext<T>>, func:Func<IContainer<T>, Task>) : Task
    + {static} <<async>> ElseIf(matchContext:Task<MatchContext<T>>, getText:Func<T, string?>, pattern:string, func:Func<IContainer<T>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<T>>
    + {static} <<async>> ElseIf(matchContext:Task<MatchContext<T>>, predict:Func<IContainer<T>, bool>, func:Func<IContainer<T>, Task>) : Task<MatchContext<T>>
    + {static} <<async>> If(simpleContext:IContainer<Message>, pattern:string, func:Func<IContainer<Message>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<Message>>
    + {static} <<async>> If(simpleContext:IContainer<CallbackQuery>, pattern:string, func:Func<IContainer<CallbackQuery>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<CallbackQuery>>
    + {static} <<async>> ElseIf(matchContext:Task<MatchContext<CallbackQuery>>, pattern:string, func:Func<IContainer<CallbackQuery>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<CallbackQuery>>
    + {static} <<async>> ElseIf(matchContext:Task<MatchContext<Message>>, pattern:string, func:Func<IContainer<Message>, Task>, regexOptions:RegexOptions?) : Task<MatchContext<Message>>
}
@enduml
