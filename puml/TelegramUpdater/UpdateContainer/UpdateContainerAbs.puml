@startuml
abstract class "UpdateContainerAbs`1"<T> {
    <<internal>> UpdateContainerAbs(insiderResolver:Func<Update, T?>, updater:IUpdater, shiningInsider:ShiningInfo<long, Update>, extraObjects:IReadOnlyDictionary<string, object>?)
    <<internal>> UpdateContainerAbs(insiderResolver:Func<Update, T?>, updater:IUpdater, insider:Update, extraObjects:IReadOnlyDictionary<string, object>?)
    + Update : T <<get>>
    + ContainsKey(key:string) : bool
}
class "IContainer`1"<T> {
}
class "Func`2"<T1,T2> {
}
class "IReadOnlyDictionary`2"<T1,T2> {
}
class "ShiningInfo`2"<T1,T2> {
}
"IContainer`1" "<T>" <|-- "UpdateContainerAbs`1"
"UpdateContainerAbs`1" --> "_insiderResolver<Update,T?>" "Func`2"
"UpdateContainerAbs`1" --> "_extraObjects<string,object>" "IReadOnlyDictionary`2"
"UpdateContainerAbs`1" --> "Container" Update
"UpdateContainerAbs`1" --> "BotClient" ITelegramBotClient
"UpdateContainerAbs`1" --> "ShiningInfo<long,Update>" "ShiningInfo`2"
"UpdateContainerAbs`1" --> "Updater" IUpdater
@enduml
