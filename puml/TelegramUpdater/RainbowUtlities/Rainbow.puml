@startuml
class "Rainbow`2"<TId,TValue> <<sealed>> {
    - <<readonly>> _handler : Func<ShiningInfo<TId, TValue>, CancellationToken, Task>?
    - <<readonly>> _exceptionHandler : Func<Exception, CancellationToken, Task>?
    - <<readonly>> _gotIdle : Action<Rainbow<TId, TValue>>?
    - _waitingList : Channel<TValue>?
    - _waitlistTask : Task? = null
    + Rainbow(maximumParallel:int, idResolver:Func<TValue, TId>, callback:Func<ShiningInfo<TId, TValue>, CancellationToken, Task>, exceptionHandler:Func<Exception, CancellationToken, Task>?, logger:ILogger<Rainbow<TId, TValue>>?, gotIdle:Action<Rainbow<TId, TValue>>?, waitingListTimeout:TimeSpan)
    + <<async>> EnqueueAsync(value:TValue, cancellationToken:CancellationToken) : ValueTask
    + IsIdle : bool <<get>>
    + DropPendingAsync(queueId:ushort) : bool
    + TryCountPending(queueId:ushort, count:int?) : bool
    + <<async>> ReadNextAsync(queueId:ushort, timeOut:TimeSpan, cancellationToken:CancellationToken) : ValueTask<ShiningInfo<TId, TValue>?>
    + <<async>> YieldAsync(queueId:ushort, cancellationToken:CancellationToken) : IAsyncEnumerable<ShiningInfo<TId, TValue>>
    + GetOwnersQueue(ownerId:TId) : ushort?
    - GetAvailableQueue() : ushort?
    - <<async>> WaitingQueuer(cancellationToken:CancellationToken) : Task
    - GetQueueOwner(queueId:ushort) : OwnerInfo<TId>?
    - <<async>> WaitForFreeQueue() : Task
    - <<async>> Processor(id:ushort, cancellationToken:CancellationToken) : Task
}
class "ConcurrentDictionary`2"<T1,T2> {
}
class "Func`2"<T1,T2> {
}
class "ILogger`1"<T> {
}
class "IEnumerable`1"<T> {
}
"Rainbow`2" --> "_availableQueues<ushort,Channel<TValue>?>" "ConcurrentDictionary`2"
"Rainbow`2" --> "_workingTasks<ushort,Task?>" "ConcurrentDictionary`2"
"Rainbow`2" --> "_ownerIdMapping<TId,OwnerInfo<TId>>" "ConcurrentDictionary`2"
"Rainbow`2" --> "_idResolver<TValue,TId>" "Func`2"
"Rainbow`2" --> "_logger<Rainbow<TId, TValue>>" "ILogger`1"
"Rainbow`2" --> "_waitingListTimeOut" TimeSpan
"Rainbow`2" --> "Processes<ProcessorInfo<TId, TValue>>" "IEnumerable`1"
@enduml
